import torch.nn as nn
import torch.nn.functional as F
from torch.nn import init

class ResidualSpatialAttentionModule(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(ResidualSpatialAttentionModule, self).__init__()
        self.pool = nn.AdaptiveAvgPool2d(1)
        self.conv1 = nn.Conv2d(in_channels,in_channels,kernel_size=7,padding=3)
        self.bn = nn.BatchNorm2d(in_channels)

        self.conv2 = nn.Conv2d(in_channels,out_channels, kernel_size=1)
        self.sig = nn.Sigmoid()
    def forward(self,x):
        input=x
        x=self.pool(x)
        x=self.conv1(x)
        x=self.bn(x)
        x=self.conv2(x)
        x= self.sig(x)
        x= x*input
        x= x+input

        return x

class DCBlock(nn.Module):
    def __init__(self, in_channels, out_channels,device='cuda'):
        super(DCBlock, self).__init__()
        self.device = device
        # Define the structure for each parallel layer
       
        self.layer1 = self._create_layer(in_channels, in_channels,kr=3,dilation=6)#,pad=1)
        self.layer2 = self._create_layer(in_channels, in_channels ,kr=3,dilation=12)#,pad=3)
        self.layer3 = self._create_layer(in_channels, in_channels,kr=3,dilation=18)#,pad=6)
        self.layer4 = self._create_layer(in_channels, in_channels,kr=3,dilation=24)#pad=9)
        self.layer5 = nn.Conv2d(in_channels*4, out_channels, kernel_size=3)
        self.layer6 = nn.Sigmoid()
        

    def _create_layer(self, in_channels, out_channels, kr, dilation, pad=None):
        # Calculate padding dynamically based on the dilation rate
        if pad is None:
            pad = dilation * (kr - 1) // 2

        conv_layer = nn.Conv2d(in_channels, out_channels, kernel_size=kr, dilation=dilation, padding=pad, bias=False)
        conv_layer = conv_layer.to(self.device)  # Move the convolution layer to the desired device
        return nn.Sequential(
            conv_layer,
            nn.BatchNorm2d(in_channels),
            nn.ReLU6(inplace=True)
        )

    def forward(self, x):
        input=x
        #x = self.layer0(x)
        out1 = self.layer1(x)
        out2 = self.layer2(x)
        out3 = self.layer3(x)
        out4 = self.layer4(x)
      
        # Concatenate the outputs along the channel dimension
        out = torch.cat([out1, out2, out3,out4], dim=1)#,out5,out6], dim=1)
        out = self.layer5(out)
        out = self.layer6(out)
        return out

class RCB(nn.Module):
    def __init__(self, in_channels, out_channels,device='cuda'):
        super(RCB, self).__init__()
        self.device = device
        # Define the structure for each parallel layer
        self.layer1 = self._create_layer(in_channels, out_channels,kr=3,pad=1)
        self.layer2 = self._create_layer(in_channels, out_channels,kr=5,pad=2)


    def _create_layer(self, in_channel, out_channel, kr, pad):
        conv_layer = nn.Conv2d(in_channel, out_channel, kernel_size=kr, padding=pad,bias=False) #Previous
        conv_layer = conv_layer.to(self.device)  # Move the convolution layer to the desired device
        return nn.Sequential(
            conv_layer,
            nn.BatchNorm2d(out_channel),
            nn.ReLU6(inplace=True)
        )

    def forward(self, x):
        input=x
        # Forward pass through each parallel layer
        out1 = self.layer1(x)
        out2 = self.layer2(x)
        # Concatenate the outputs along the channel dimension
        out3 = torch.cat([out1, out2], dim=1)
        out=out3+input
        return out
class hswish(nn.Module):
    def forward(self, x):
        out = x * F.relu6(x + 3, inplace=True) / 6
        return out


class hsigmoid(nn.Module):
    def forward(self, x):
        out = F.relu6(x + 3, inplace=True) / 6
        return out


class SeModule(nn.Module):
    def __init__(self, in_size, reduction=4):
        super(SeModule, self).__init__()
        expand_size = max(in_size // reduction, 8)
        self.se = nn.Sequential(
            nn.AdaptiveAvgPool2d(1),
            nn.Conv2d(in_size, expand_size, kernel_size=1, bias=False),
            nn.BatchNorm2d(expand_size),
            nn.ReLU(inplace=True),
            nn.Conv2d(expand_size, in_size, kernel_size=1, bias=False),
            nn.Hardsigmoid()
        )

    def forward(self, x):
        return x * self.se(x)


class Block(nn.Module):
    '''expand + depthwise + pointwise'''

    def __init__(self, kernel_size, in_size, expand_size, out_size, act, se, stride):
        super(Block, self).__init__()
        self.stride = stride

        self.conv1 = nn.Conv2d(in_size, expand_size, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(expand_size)
        self.act1 = act(inplace=True)

        self.conv2 = nn.Conv2d(expand_size, expand_size, kernel_size=kernel_size, stride=stride,
                               padding=kernel_size // 2, groups=expand_size, bias=False)
        self.bn2 = nn.BatchNorm2d(expand_size)
        self.act2 = act(inplace=True)
        self.se = SeModule(expand_size) if se else nn.Identity()

        self.conv3 = nn.Conv2d(expand_size, out_size, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(out_size)
        self.act3 = act(inplace=True)

        self.skip = None
        if stride == 1 and in_size != out_size:
            self.skip = nn.Sequential(
                nn.Conv2d(in_size, out_size, kernel_size=1, bias=False),
                nn.BatchNorm2d(out_size)
            )

        if stride == 2 and in_size != out_size:
            self.skip = nn.Sequential(
                nn.Conv2d(in_channels=in_size, out_channels=in_size, kernel_size=3, groups=in_size, stride=2, padding=1,
                          bias=False),
                nn.BatchNorm2d(in_size),
                nn.Conv2d(in_size, out_size, kernel_size=1, bias=True),
                nn.BatchNorm2d(out_size)
            )

        if stride == 2 and in_size == out_size:
            self.skip = nn.Sequential(
                nn.Conv2d(in_channels=in_size, out_channels=out_size, kernel_size=3, groups=in_size, stride=2,
                          padding=1, bias=False),
                nn.BatchNorm2d(out_size)
            )

    def forward(self, x):
        skip = x
        out = self.act1(self.bn1(self.conv1(x)))
        out = self.act2(self.bn2(self.conv2(out)))
        out = self.se(out)
        out = self.bn3(self.conv3(out))
        if self.skip is not None:
            skip = self.skip(skip)
        return self.act3(out + skip)


class MobileNetV3_Large(nn.Module):
    def __init__(self, num_classes=7, act=nn.Hardswish):
        super(MobileNetV3_Large, self).__init__()
        self.res1 = RCB(24, 24 // 2)
        self.rsam1 = ResidualSpatialAttentionModule(24, 24)
        self.res2 = RCB(40, 40 // 2)
        self.rsam2 = ResidualSpatialAttentionModule(40, 40)
        self.res3 = RCB(80, 80 // 2)
        self.rsam3 = ResidualSpatialAttentionModule(80, 80)
        self.dcb1 = DCBlock(160, 160)


        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=2, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(16)
        self.hs1 = act(inplace=True)

        self.bneck = nn.Sequential(
            Block(3, 16, 16, 16, nn.ReLU, False, 1),
            Block(3, 16, 64, 24, nn.ReLU, False, 2),
            Block(3, 24, 72, 24, nn.ReLU, False, 1),
            Block(5, 24, 72, 40, nn.ReLU, True, 2),
            Block(5, 40, 120, 40, nn.ReLU, True, 1),
            Block(5, 40, 120, 40, nn.ReLU, True, 1),
            Block(3, 40, 240, 80, act, False, 2),
            Block(3, 80, 200, 80, act, False, 1),
            Block(3, 80, 184, 80, act, False, 1),
            Block(3, 80, 184, 80, act, False, 1),
            Block(3, 80, 480, 112, act, True, 1),
            Block(3, 112, 672, 112, act, True, 1),
            Block(5, 112, 672, 160, act, True, 2),
            Block(5, 160, 672, 160, act, True, 1),
            Block(5, 160, 960, 160, act, True, 1)
        )

        self.conv2 = nn.Conv2d(160, 960, kernel_size=1, stride=1, padding=0, bias=False)
        self.bn2 = nn.BatchNorm2d(960)
        self.hs2 = act(inplace=True)
        self.gap = nn.AdaptiveAvgPool2d(1)

        self.linear3 = nn.Linear(960, 1280, bias=False)
        self.bn3 = nn.BatchNorm1d(1280)
        self.hs3 = act(inplace=True)
        self.drop = nn.Dropout(0.2)

        self.linear4 = nn.Linear(1280, num_classes)
        self.init_params()

    def init_params(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                init.kaiming_normal_(m.weight, mode='fan_out')
                if m.bias is not None:
                    init.constant_(m.bias, 0)
            elif isinstance(m, nn.BatchNorm2d):
                init.constant_(m.weight, 1)
                init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.normal_(m.weight, std=0.001)
                if m.bias is not None:
                    init.constant_(m.bias, 0)

    def forward(self, x):
        out = self.hs1(self.bn1(self.conv1(x)))

            # Pass through the first bottleneck
        for i, block in enumerate(self.bneck):
            if i == 1:

                out = block(out)
                out1 = self.res1(out)
                out2 = self.rsam1(out)
                out = out2 + out1
            elif i == 3:
                out = block(out)
                out4 = self.res2(out)
                out5 = self.rsam2(out)
                out = out5 + out4

            elif i == 6:
                out = block(out)
                out7 = self.res3(out)
                out8 = self.rsam3(out)
                out = out8 + out7
            elif i == 14:
                out = block(out)
                out = self.dcb1(out)

            else:
                out = block(out)

        out = self.hs2(self.bn2(self.conv2(out)))
        out = self.gap(out).flatten(1)
        out = self.drop(self.hs3(self.bn3(self.linear3(out))))

        return self.linear4(out)
